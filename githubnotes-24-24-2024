Initialize a git repository

$ git init

Get the status of the repository

$ git status

Stage a change of a file

$ git add <file>


Commit a change

$ git commit -m "<message-to-commit>"

If we remove the .git folder git will no longer keep track of the project


Get the logs of the commits and other information

$ git log
$ git show

Get the files that are being tracked by git

$ git ls-file


Add and commit in one line

$ git commit -am"<message>"


Undo something before adding it

$ git reset HEAD <file>


Undo the changes to a previous stage

$ git checkout -- <file>


Get the logs in a much "neater" way

$ git log --oneline --graph --decorate --all


Create an alias for the previous command

$ git config --global alias.<aliasname> "log --oneline --graph --decorate --all"

Use the alias

$ git <aliasname> -- <file/s>


Get a list of the global configuration (user's not repo)

$ git config --global --list


"Rename" a file

$ git mv <file> <newfile> 


Delete a file 

$ git rm <file>


Both rename and delete need to be commited.


If a file is renamed with a bash command git will take it as a deletion, to stage the deletion of the old file and the new file use the -u flag


$ git add -u

To add every change made in the files we use the -A flag

$ git add -A


To exclude files from git to track them use .gitignore file
-------------------------------------------------------------

example:

$ echo "*.log" > .gitignore


Get the difference between the current head of the branch and other commit
---------------------------------------------------------------------------

$ git diff <commit-id> HEAD


Use the tool to watch different commits
----------------------------------------

$ git difftool <commit-id> HEAD


Branching
-----------

Important Concept

Branch = Timeline of commits

Branch names are labels
  
  Deletion removes label only 


Types of merging:

1. Fast forward (simple merge)
2. Automatically
3. Manual


Special Markers
------------------

These are "pointers" in every branch.

The HEAD marker points to the last commit of the current branch, as we switch branches the location of HEAD moves.


Check current branch

$ git branch

Create and switch into a new branch

$ git checkout -b <new-branch>

Compare branches

$ git diff <branch1> <branch2>
$ git diff updates master


Switch between branches

$ git checkout <branch>


Merge a branch to the actual branch

$ git merge <branch-to-merge>


Delete a branch

$ git branch -d <branch-to-delete>


There will be a conflict when modifying the same file on two different branches, mostly master branch and other branch, and we can resolve this with:

$ git mergetool


Tags
------

Tags are just labels that you can put at any arbitrary commit point, by default the tag will be asigned to the HEAD commit

Create a simple tag

$ git tag <tag-name>

Create associative information tag

$ git tag -a v1.0 -m "Release 1.0"

Get list of tags

$ git tag --list

Delete a tag

$ git tag -d <tag-name>

The output for the next command will show some useful information like the author of the tag, the date it was tagged, the quote on quote commit message that goes with the tag; followed by the rest of the information for that commit  that's associated with that tag.

$ git show <tag>


Stashing
---------

This is useful when we are modifying some file and we have to modify another file without the first file being tracked.

$ git stash

List the stashes

$ git stash list

After we make the other changes not related to the file we can "get back" where we left

$ git stash pop

And the changes will be made again, check with git hist



Reset & Reflog
---------------

Reset is like time travel! when we make a change and we want to get back we can use this types of commands.


There are 3 ways of resetting:

1. Soft
2. Default/Mixed
3. Hard

Soft reset:

$ git reset <commit-id> --soft


Reflog will show the history of resets that we did.

$ git reflog


Combining these two we can get back to the last changes, first we make a git reflog to get the id that we want to get back and then a hard reset to get back.


Github
-----------


Remote
-----------

Its the tool that handles all the remote connections with Github

Get the remote connections

$ git remote -v

Add a new repository to the remote connections

$ git remote add <reference> <url>

git remote add origin <github url>


Push changes to remote repository
--------------------------------------

To push our changes 

$ git push -u <remote-reference> <branch> --tags

* The --tag flag will push all the tags asssociated to the local repo

git push -u origin master --tags



