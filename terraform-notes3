15/05/2024

Terraform functions
--------------------

The Terraform language includes a number of built-in functions that you can use to transform and combine values.

The general syntax for function calls is a function name followed by comma-separated arguments in parenthesis:

function(arg1, ag2)

Exmaple:

max(5, 12, 9)

Terraform does not support user-defined functions.

List of available functions
-------------------------------

- Numeric
- String
- Collection
- Encoding
- Filesystem
- Date & Time
- Hash and Crypto
- IP Network
- Type Conversion



Access the terraform console
-----------------------------

$ terraform console



Some functions:

- lookup:  this function will take a map and a string and return the value in the map for the string.

lookup(map, key, defaultvalue)
lookup({a="ay", b="bee"}, "a"})
lookup({a="ay"}, b="bee"}, "c", "what?")


- element: retrieves a single element from a list

element(list, index)
element(["a", "b", "c"], 1)

* This can be used with the count.index value if we have multiple resources and the count parameter assigned.

- file: retrieves a file in the path module

file("${path.module}/file.extention")


- formatdate: converts a timestamp into a different time format

formatdate(spec, timestamp)
formatdate("DD MMM YYYY", timestamp())



Introducing Data Sources
--------------------------

Data sources allow Terraform to use / fetch information defined outside of Terraform

We can fetch information from sources like:

- Digital Ocean Accounts
- A local file
- AWS Resources


provider aws {
  region = "us-east-1"
}

data "aws_instance" "example" {}


If we have some resources created (like ec2 instances) we can get information about them like the ips and id's, etc.

They will be stored in the terraform.tfstate file.


A data source is accessed via a special kind of resource known as a data resource, declared using a data block.

Following data block request that Terraform read from a given data source ("aws_instance") and export the result under the given local name ("foo")

data "aws_instance" "foo" {}


we can also specify filters


data "aws_instance" "foo" {
  filter {
    name = "tag:Team"
    values = ["Production"]
  }
}

* data "aws_instances" "example" {} will fetch multiple instances



Fetch latest OS Images Using Data Sources
------------------------------------------


We can get the id of any image in AWS with data sources.

Hardcoding static details in your Terraform code will lead to repeatedly modify your code to meet changing requirements.

We want Terraform to automatically query the latest OS image in AWS or any other provider and use that for creating servers.


data "aws_ami" "example" {
  owners = ["amazon"]
  most_recent = true
  
  filter {
    name = "name"
    values = ["myami-*"]
  }
}



Some values:
21/05/2024

Linux 2023: al2023-ami-2023.4.*.0-kernel-6.1-arm64
Ubuntu 22.04: ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-arm64-server-* 

